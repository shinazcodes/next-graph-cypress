import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RouteConfig } from '../../../util/RouteConfig';
import { fetchPage } from '../../api/counterAPI';

const initialState = {
    value: 0,
    status: 'idle',
    highestAttainedPage: '0',
    routConfig: RouteConfig
};
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementPageAsync = createAsyncThunk(
    'page/nextPage',
    async (currentPage: string) => {
        console.log("response")

        const response = await fetchPage(currentPage);
        console.log(response)
        // The value we return becomes the `fulfilled` action payload
        return response.submittedPage;
    }
);

export const pageSlice = createSlice({
    name: 'page',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setNextPage: (state, action: {
            payload: { currentPage: string, nextPage: string };
            type: string;
        }) => {
            state.routConfig[action.payload.currentPage].next = action.payload.currentPage
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(incrementPageAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementPageAsync.fulfilled, (state, action) => {
                state.status = 'SUCCESS';
                console.log("response")

                state.highestAttainedPage = action.payload;
            });
    },
});

export const { setNextPage } = pageSlice.actions;

export default pageSlice.reducer;
